version: '3.9'

services:
  proxy:
    image: traefik:latest
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK}
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG}`)
      - --providers.docker.exposedbydefault=false
      - --accesslog
      - --log
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG}
        - traefik.http.middlewares.${STACK_NAME}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${STACK_NAME}-https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.${STACK_NAME}-proxy-http.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME}-proxy-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME}-proxy-https.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)
        - traefik.http.routers.${STACK_NAME}-proxy-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME}-proxy-https.tls=true
        - traefik.http.routers.${STACK_NAME}-proxy-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME}-proxy.loadbalancer.server.port=80
        - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN})/(.*)
        - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://${DOMAIN}/$${3}
        - traefik.http.routers.${STACK_NAME}-proxy-https.middlewares=${STACK_NAME}-www-redirect
        - traefik.http.routers.${STACK_NAME}-proxy-http.middlewares=${STACK_NAME}-www-redirect,${STACK_NAME}-https-redirect
  
  swagger:
    image: swaggerapi/swagger-ui:latest
    environment:
      URL: 'swagger.yml'
    volumes:
      - ./backend/swagger/swagger.yml:/usr/share/nginx/html/swagger.yml
    labels:
      swaggerLabel: LCT Hack Backend
      swaggerGroup: lst-hack
      swaggerPort: 8081
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${STACK_NAME}-backend-http.rule=PathPrefix(`/swagger`)
        - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=80

  db:
    image: postgres:latest
    volumes:
      - lct-hack-db-data:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME}.lct-hack-db-data == true

  backend:
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
    ports:
      - ${BACKEND_PORT}80:${BACKEND_PORT}
    environment:
      DEBUG: ${DEBUG}

      BACKEND_TTILE: ${BACKEND_TTILE}
      BACKEND_DESCRIPTION: ${BACKEND_DESCRIPTION}
      BACKEND_PREFIX: ${BACKEND_PREFIX}

      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_RELOAD: ${BACKEND_RELOAD}

      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}

      BACKEND_JWT_SECRET: ${BACKEND_JWT_SECRET}
      BACKEND_JWT_ALGORITHM: ${BACKEND_JWT_ALGORITHM}
      BACKEND_JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${BACKEND_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}

      BACKEND_DADATA_TOKEN: ${BACKEND_DADATA_TOKEN}

      BACKEND_DISABLE_AUTH: ${BACKEND_DISABLE_AUTH}
      BACKEND_DISABLE_FILE_SENDING: ${BACKEND_DISABLE_FILE_SENDING}

      BROKER_HOST: ${BROKER_HOST}
      BROKER_PORT: ${BROKER_PORT}
      BROKER_USER: ${BROKER_USER}
      BROKER_PASS: ${BROKER_PASS}
      BROKER_URL: ${BROKER_URL}

      STORAGE_REGION: ${STORAGE_REGION}
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT}
      STORAGE_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      STORAGE_ACCESS_KEY_ID: ${STORAGE_ACCESS_KEY_ID}
      STORAGE_BUCKET_NAME: ${STORAGE_BUCKET_NAME}
      STORAGE_FOLDER_NAME: ${STORAGE_FOLDER_NAME}

      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      ENV: development
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${STACK_NAME}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=80   
  
  frontend:
    image: '${DOCKER_IMAGE_FRONTEND}:${TAG-latest}'
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=${TRAEFIK_TAG}
        - traefik.http.routers.${STACK_NAME}-frontend-http.rule=PathPrefix(`/`)
        - traefik.http.services.${STACK_NAME}-frontend.loadbalancer.server.port=80

volumes:
  lct-hack-db-data:
  broker:

networks:
  traefik-public:
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}